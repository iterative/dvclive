[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]

[project]
authors = [{name = "Iterative", email = "support@dvc.org"}]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11"
]
dependencies = [
  "dvc>=3.33.3",
  "dvc-render>=1.0.0,<2",
  "dvc-studio-client>=0.17.1,<1",
  "funcy",
  "gto",
  "ruamel.yaml",
  "scmrepo"
]
description = "Experiments logger for ML projects."
dynamic = ["version"]
keywords = [
  "ai",
  "metrics",
  "collaboration",
  "data-science",
  "data-version-control",
  "developer-tools",
  "git",
  "machine-learning",
  "reproducibility"
]
license = {text = "Apache License 2.0"}
maintainers = [{name = "Iterative", email = "support@dvc.org"}]
name = "dvclive"
readme = "README.md"
requires-python = ">=3.8"

[project.optional-dependencies]
all = [
  "dvclive[image,mmcv,tf,xgb,lgbm,huggingface,catalyst,fastai,lightning,optuna,plots,markdown]"
]
catalyst = ["catalyst>22"]
dev = [
  "dvclive[all,tests]",
  "mypy>=1.1.1",
  "types-PyYAML"
]
fastai = ["fastai"]
huggingface = ["transformers", "datasets"]
image = ["numpy", "pillow"]
lgbm = ["lightgbm"]
lightning = ["lightning>=2.0", "torch", "jsonargparse[signatures]>=4.26.1"]
markdown = ["matplotlib"]
mmcv = ["mmcv"]
optuna = ["optuna"]
plots = ["scikit-learn", "pandas", "numpy"]
sklearn = ["scikit-learn"]
tests = [
  "pytest>=7.2.0,<8.0",
  "pytest-sugar>=0.9.6,<1.0",
  "pytest-cov>=3.0.0,<4.0",
  "pytest-mock>=3.8.2,<4.0",
  "dvclive[image,plots,markdown]",
  "ipython"
]
tf = ["tensorflow"]
xgb = ["xgboost"]

[project.urls]
Changelog = "https://github.com/iterative/dvclive/releases"
Documentation = "https://dvc.org/doc/dvclive"
Homepage = "https://github.com/iterative/dvclive"
Issues = "https://github.com/iterative/dvclive/issues"
Repository = "https://github.com/iterative/dvclive"

[tool.codespell]
ignore-words-list = "fpr"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "if typing.TYPE_CHECKING:",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
  "raise AssertionError",
  "@overload"
]
show_missing = true

[tool.coverage.run]
branch = true
source = ["dvclive", "tests"]

[tool.mypy]
check_untyped_defs = false
files = ["src", "tests"]
ignore_missing_imports = true
pretty = true
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true

[tool.pytest.ini_options]
addopts = "-ra"
markers = """
    vscode: mark a test that verifies behavior that VS Code relies on
    studio: mark a test that verifies behavior that Studio relies on
"""

[tool.ruff]
ignore = ["N818", "UP006", "UP007", "UP035", "UP038", "B905", "PGH003"]
select = ["F", "E", "W", "C90", "N", "UP", "YTT", "S", "BLE", "B", "A", "C4", "T10", "EXE", "ISC", "INP", "PIE", "T20", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "INT", "ARG", "PGH", "PL", "TRY", "NPY", "RUF"]

[tool.ruff.per-file-ignores]
"noxfile.py" = ["D", "PTH"]
"tests/*" = ["S101", "INP001", "SLF001", "ARG001", "ARG002", "ARG005", "PLR2004", "NPY002"]

[tool.ruff.pylint]
max-args = 10

[tool.setuptools]
license-files = ["LICENSE"]
platforms = ["any"]

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*"]
namespaces = false
where = ["src"]

[tool.setuptools_scm]
write_to = "src/dvclive/_dvclive_version.py"
