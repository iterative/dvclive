[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"

[project]
description = "Experiments logger for ML projects."
name = "dvclive"
readme = "README.md"
keywords = [
    "ai",
    "metrics",
    "collaboration",
    "data-science",
    "data-version-control",
    "developer-tools",
    "git",
    "machine-learning",
    "reproducibility",
]
license = { text = "Apache License 2.0" }
maintainers = [{ name = "Iterative", email = "support@dvc.org" }]
authors = [{ name = "Iterative", email = "support@dvc.org" }]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dynamic = ["version"]
dependencies = [
    "dvc>=3.22.1",
    "dvc-render>=0.6.0,<1.0",
    "dvc-studio-client>=0.15.0,<1",
    "funcy",
    "gto",
    "ruamel.yaml",
    "scmrepo",
]
[project.optional-dependencies]
image = ["numpy", "pillow"]
sklearn = ["scikit-learn"]
plots = ["scikit-learn"]
markdown = ["matplotlib"]
tests = [
    "pytest>=7.2.0,<8.0",
    "pytest-sugar>=0.9.6,<1.0",
    "pytest-cov>=3.0.0,<4.0",
    "pytest-mock>=3.8.2,<4.0",
    "dvclive[image,plots,markdown]",
    "ipython",
]
dev = [
    "dvclive[all,tests]",
    "mypy>=1.1.1",
    "types-PyYAML",
]
mmcv = ["mmcv"]
tf = ["tensorflow"]
xgb = ["xgboost"]
lgbm = ["lightgbm"]
huggingface = ["transformers", "datasets"]
catalyst = ["catalyst>22"]
fastai = ["fastai"]
lightning = ["lightning>=2.0", "torch"]
optuna = ["optuna"]
all = [
   "dvclive[image,mmcv,tf,xgb,lgbm,huggingface,catalyst,fastai,pytorch-lightning,optuna,plots,markdown]"
]

[project.urls]
Homepage = "https://github.com/iterative/dvclive"
Documentation = "https://dvc.org/doc/dvclive"
Repository = "https://github.com/iterative/dvclive"
Changelog = "https://github.com/iterative/dvclive/releases"
Issues = "https://github.com/iterative/dvclive/issues"

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*"]
where = ["src"]
namespaces = false

[tool.setuptools]
license-files = ["LICENSE"]
platforms = ["any"]

[tool.setuptools_scm]
write_to = "src/dvclive/_dvclive_version.py"

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
known_first_party = ["dvclive"]
line_length = 88

[tool.pytest.ini_options]
addopts = "-ra"
markers = """
    vscode: mark a test that verifies behavior that VS Code relies on
    studio: mark a test that verifies behavior that Studio relies on
"""

[tool.coverage.run]
branch = true
source = ["dvclive", "tests"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise AssertionError",
    "@overload",
]

[tool.mypy]
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
check_untyped_defs = false
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
ignore_missing_imports = true
files = ["src", "tests"]
enable_recursive_aliases = true

[tool.codespell]
ignore-words-list = "fpr"

[tool.ruff]
ignore = ["N818", "UP006", "UP007", "UP035", "UP038", "B905", "PGH003"]
select = ["F", "E", "W", "C90", "N", "UP", "YTT", "S", "BLE", "B", "A", "C4", "T10", "EXE", "ISC", "INP", "PIE", "T20", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "INT", "ARG", "PGH", "PL", "TRY", "NPY", "RUF"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "INP001", "SLF001", "ARG001", "ARG002", "ARG005", "PLR2004", "NPY002"]

[tool.ruff.pylint]
max-args = 10
